/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LiquidityManager,
  LiquidityManagerInterface,
} from "../LiquidityManager";

const _abi = [
  {
    inputs: [],
    name: "burnAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_routerAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    name: "createPair",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_routerAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    name: "getLiquidityCreated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_routerAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    name: "getPairAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405261dead6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b50610607806100626000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806318255bde14610051578063524d01f81461008157806370d5ae05146100b157806376f79738146100cf575b600080fd5b61006b600480360381019061006691906104b3565b6100ff565b6040516100789190610521565b60405180910390f35b61009b600480360381019061009691906104b3565b610236565b6040516100a8919061054b565b60405180910390f35b6100b9610330565b6040516100c6919061054b565b60405180910390f35b6100e960048036038101906100e491906104b3565b610354565b6040516100f6919061054b565b60405180910390f35b6000808473ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561014d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610171919061057b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663e6a4390586866040518363ffffffff1660e01b81526004016101c69291906105a8565b602060405180830381865afa1580156101e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610207919061057b565b73ffffffffffffffffffffffffffffffffffffffff161461022957600161022c565b60005b9150509392505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a8919061057b565b90508073ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b81526004016102e59291906105a8565b602060405180830381865afa158015610302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610326919061057b565b9150509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808473ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c6919061057b565b90508073ffffffffffffffffffffffffffffffffffffffff1663c9c6539685856040518363ffffffff1660e01b81526004016104039291906105a8565b6020604051808303816000875af1158015610422573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610446919061057b565b9150509392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061048082610455565b9050919050565b61049081610475565b811461049b57600080fd5b50565b6000813590506104ad81610487565b92915050565b6000806000606084860312156104cc576104cb610450565b5b60006104da8682870161049e565b93505060206104eb8682870161049e565b92505060406104fc8682870161049e565b9150509250925092565b60008115159050919050565b61051b81610506565b82525050565b60006020820190506105366000830184610512565b92915050565b61054581610475565b82525050565b6000602082019050610560600083018461053c565b92915050565b60008151905061057581610487565b92915050565b60006020828403121561059157610590610450565b5b600061059f84828501610566565b91505092915050565b60006040820190506105bd600083018561053c565b6105ca602083018461053c565b939250505056fea2646970667358221220b21465f503d52b8154edba1b3bd939c565cee025d596b79e02f87dbc9e40884864736f6c634300080b0033";

type LiquidityManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityManager__factory extends ContractFactory {
  constructor(...args: LiquidityManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LiquidityManager";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityManager> {
    return super.deploy(overrides || {}) as Promise<LiquidityManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LiquidityManager {
    return super.attach(address) as LiquidityManager;
  }
  connect(signer: Signer): LiquidityManager__factory {
    return super.connect(signer) as LiquidityManager__factory;
  }
  static readonly contractName: "LiquidityManager";
  public readonly contractName: "LiquidityManager";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityManagerInterface {
    return new utils.Interface(_abi) as LiquidityManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityManager {
    return new Contract(address, _abi, signerOrProvider) as LiquidityManager;
  }
}
