/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapV2RouterMock,
  UniswapV2RouterMockInterface,
} from "../UniswapV2RouterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103de3803806103de833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6102c7806101176000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c45a01551461003b578063e8e3370014610059575b600080fd5b61004361008b565b6040516100509190610113565b60405180910390f35b610073600480360381019061006e9190610195565b6100b4565b6040516100829392919061025a565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060006001806001925092509250985098509895505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100fd826100d2565b9050919050565b61010d816100f2565b82525050565b60006020820190506101286000830184610104565b92915050565b600080fd5b61013c816100f2565b811461014757600080fd5b50565b60008135905061015981610133565b92915050565b6000819050919050565b6101728161015f565b811461017d57600080fd5b50565b60008135905061018f81610169565b92915050565b600080600080600080600080610100898b0312156101b6576101b561012e565b5b60006101c48b828c0161014a565b98505060206101d58b828c0161014a565b97505060406101e68b828c01610180565b96505060606101f78b828c01610180565b95505060806102088b828c01610180565b94505060a06102198b828c01610180565b93505060c061022a8b828c0161014a565b92505060e061023b8b828c01610180565b9150509295985092959890939650565b6102548161015f565b82525050565b600060608201905061026f600083018661024b565b61027c602083018561024b565b610289604083018461024b565b94935050505056fea2646970667358221220627d0e7307ece4c6ffa77eea5c2b68e8645aa547805b60ab2e52a5cd1a4dd9e064736f6c634300080b0033";

type UniswapV2RouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV2RouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV2RouterMock__factory extends ContractFactory {
  constructor(...args: UniswapV2RouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UniswapV2RouterMock";
  }

  deploy(
    _factoryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapV2RouterMock> {
    return super.deploy(
      _factoryAddress,
      overrides || {}
    ) as Promise<UniswapV2RouterMock>;
  }
  getDeployTransaction(
    _factoryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factoryAddress, overrides || {});
  }
  attach(address: string): UniswapV2RouterMock {
    return super.attach(address) as UniswapV2RouterMock;
  }
  connect(signer: Signer): UniswapV2RouterMock__factory {
    return super.connect(signer) as UniswapV2RouterMock__factory;
  }
  static readonly contractName: "UniswapV2RouterMock";
  public readonly contractName: "UniswapV2RouterMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2RouterMockInterface {
    return new utils.Interface(_abi) as UniswapV2RouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV2RouterMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapV2RouterMock;
  }
}
