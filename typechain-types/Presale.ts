/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PresaleInterface extends utils.Interface {
  contractName: "Presale";
  functions: {
    "burnRemainingTokens()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimTimeOut()": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "claimedCount()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositOwn(uint256)": FunctionFragment;
    "depositTimeOut()": FunctionFragment;
    "deposited(address)": FunctionFragment;
    "depositedCount()": FunctionFragment;
    "devAddress()": FunctionFragment;
    "devFeePercent()": FunctionFragment;
    "getBalanceTokenOur()": FunctionFragment;
    "getBalanceTokenTheir()": FunctionFragment;
    "getLiquidityTokenOur()": FunctionFragment;
    "getLiquidityTokenTheir()": FunctionFragment;
    "getPresaleTokenTheirMax()": FunctionFragment;
    "liquidityManager()": FunctionFragment;
    "ownBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "routerAddress()": FunctionFragment;
    "setDevAddress(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "tokenOur()": FunctionFragment;
    "tokenPriceLiquidity()": FunctionFragment;
    "tokenPricePresale()": FunctionFragment;
    "tokenTheir()": FunctionFragment;
    "totalClaimable()": FunctionFragment;
    "totalClaimableNotDeducted()": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "totalDeposited()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnRemainingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimTimeOut",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(functionFragment: "claimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOwn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTimeOut",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposited", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceTokenOur",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceTokenTheir",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityTokenOur",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityTokenTheir",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPresaleTokenTheirMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenOur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPriceLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPricePresale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTheir",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimableNotDeducted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnRemainingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTimeOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOwn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTimeOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposited", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceTokenOur",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceTokenTheir",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityTokenOur",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityTokenTheir",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPresaleTokenTheirMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenOur", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPricePresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenTheir", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimableNotDeducted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "eventBurnRemainingTokens(uint256)": EventFragment;
    "eventClaimed(address,uint256)": EventFragment;
    "eventDeposited(address,uint256)": EventFragment;
    "eventSetDevAddress(address)": EventFragment;
    "eventSetTokenOurAddress(address)": EventFragment;
    "eventSetTokenPriceLiquidity(uint256)": EventFragment;
    "eventSetTokenPricePresale(uint256)": EventFragment;
    "eventSetTokenTheirAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventBurnRemainingTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventSetDevAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventSetTokenOurAddress"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "eventSetTokenPriceLiquidity"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventSetTokenPricePresale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventSetTokenTheirAddress"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type eventBurnRemainingTokensEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type eventBurnRemainingTokensEventFilter =
  TypedEventFilter<eventBurnRemainingTokensEvent>;

export type eventClaimedEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; amount: BigNumber }
>;

export type eventClaimedEventFilter = TypedEventFilter<eventClaimedEvent>;

export type eventDepositedEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; amount: BigNumber }
>;

export type eventDepositedEventFilter = TypedEventFilter<eventDepositedEvent>;

export type eventSetDevAddressEvent = TypedEvent<
  [string],
  { devAddress: string }
>;

export type eventSetDevAddressEventFilter =
  TypedEventFilter<eventSetDevAddressEvent>;

export type eventSetTokenOurAddressEvent = TypedEvent<
  [string],
  { tokenAddress: string }
>;

export type eventSetTokenOurAddressEventFilter =
  TypedEventFilter<eventSetTokenOurAddressEvent>;

export type eventSetTokenPriceLiquidityEvent = TypedEvent<
  [BigNumber],
  { price: BigNumber }
>;

export type eventSetTokenPriceLiquidityEventFilter =
  TypedEventFilter<eventSetTokenPriceLiquidityEvent>;

export type eventSetTokenPricePresaleEvent = TypedEvent<
  [BigNumber],
  { price: BigNumber }
>;

export type eventSetTokenPricePresaleEventFilter =
  TypedEventFilter<eventSetTokenPricePresaleEvent>;

export type eventSetTokenTheirAddressEvent = TypedEvent<
  [string],
  { tokenAddress: string }
>;

export type eventSetTokenTheirAddressEventFilter =
  TypedEventFilter<eventSetTokenTheirAddressEvent>;

export interface Presale extends BaseContract {
  contractName: "Presale";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PresaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnRemainingTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTimeOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimable(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositOwn(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTimeOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposited(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    devFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalanceTokenOur(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalanceTokenTheir(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityTokenOur(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityTokenTheir(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPresaleTokenTheirMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityManager(overrides?: CallOverrides): Promise<[string]>;

    ownBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routerAddress(overrides?: CallOverrides): Promise<[string]>;

    setDevAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenOur(overrides?: CallOverrides): Promise<[string]>;

    tokenPriceLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenPricePresale(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenTheir(overrides?: CallOverrides): Promise<[string]>;

    totalClaimable(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimableNotDeducted(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnRemainingTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTimeOut(overrides?: CallOverrides): Promise<BigNumber>;

  claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimedCount(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositOwn(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTimeOut(overrides?: CallOverrides): Promise<BigNumber>;

  deposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositedCount(overrides?: CallOverrides): Promise<BigNumber>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  devFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  getBalanceTokenOur(overrides?: CallOverrides): Promise<BigNumber>;

  getBalanceTokenTheir(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityTokenOur(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityTokenTheir(overrides?: CallOverrides): Promise<BigNumber>;

  getPresaleTokenTheirMax(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityManager(overrides?: CallOverrides): Promise<string>;

  ownBalance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routerAddress(overrides?: CallOverrides): Promise<string>;

  setDevAddress(
    _devAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  tokenOur(overrides?: CallOverrides): Promise<string>;

  tokenPriceLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  tokenPricePresale(overrides?: CallOverrides): Promise<BigNumber>;

  tokenTheir(overrides?: CallOverrides): Promise<string>;

  totalClaimable(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimableNotDeducted(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnRemainingTokens(overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimTimeOut(overrides?: CallOverrides): Promise<BigNumber>;

    claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimedCount(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositOwn(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositTimeOut(overrides?: CallOverrides): Promise<BigNumber>;

    deposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositedCount(overrides?: CallOverrides): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    devFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceTokenOur(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceTokenTheir(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityTokenOur(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityTokenTheir(overrides?: CallOverrides): Promise<BigNumber>;

    getPresaleTokenTheirMax(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityManager(overrides?: CallOverrides): Promise<string>;

    ownBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    routerAddress(overrides?: CallOverrides): Promise<string>;

    setDevAddress(
      _devAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOur(overrides?: CallOverrides): Promise<string>;

    tokenPriceLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPricePresale(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTheir(overrides?: CallOverrides): Promise<string>;

    totalClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimableNotDeducted(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "eventBurnRemainingTokens(uint256)"(
      amount?: null
    ): eventBurnRemainingTokensEventFilter;
    eventBurnRemainingTokens(
      amount?: null
    ): eventBurnRemainingTokensEventFilter;

    "eventClaimed(address,uint256)"(
      sender?: null,
      amount?: null
    ): eventClaimedEventFilter;
    eventClaimed(sender?: null, amount?: null): eventClaimedEventFilter;

    "eventDeposited(address,uint256)"(
      sender?: null,
      amount?: null
    ): eventDepositedEventFilter;
    eventDeposited(sender?: null, amount?: null): eventDepositedEventFilter;

    "eventSetDevAddress(address)"(
      devAddress?: null
    ): eventSetDevAddressEventFilter;
    eventSetDevAddress(devAddress?: null): eventSetDevAddressEventFilter;

    "eventSetTokenOurAddress(address)"(
      tokenAddress?: null
    ): eventSetTokenOurAddressEventFilter;
    eventSetTokenOurAddress(
      tokenAddress?: null
    ): eventSetTokenOurAddressEventFilter;

    "eventSetTokenPriceLiquidity(uint256)"(
      price?: null
    ): eventSetTokenPriceLiquidityEventFilter;
    eventSetTokenPriceLiquidity(
      price?: null
    ): eventSetTokenPriceLiquidityEventFilter;

    "eventSetTokenPricePresale(uint256)"(
      price?: null
    ): eventSetTokenPricePresaleEventFilter;
    eventSetTokenPricePresale(
      price?: null
    ): eventSetTokenPricePresaleEventFilter;

    "eventSetTokenTheirAddress(address)"(
      tokenAddress?: null
    ): eventSetTokenTheirAddressEventFilter;
    eventSetTokenTheirAddress(
      tokenAddress?: null
    ): eventSetTokenTheirAddressEventFilter;
  };

  estimateGas: {
    burnRemainingTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTimeOut(overrides?: CallOverrides): Promise<BigNumber>;

    claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimedCount(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositOwn(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTimeOut(overrides?: CallOverrides): Promise<BigNumber>;

    deposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositedCount(overrides?: CallOverrides): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    devFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceTokenOur(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceTokenTheir(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityTokenOur(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityTokenTheir(overrides?: CallOverrides): Promise<BigNumber>;

    getPresaleTokenTheirMax(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityManager(overrides?: CallOverrides): Promise<BigNumber>;

    ownBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setDevAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOur(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPriceLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPricePresale(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTheir(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimableNotDeducted(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnRemainingTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTimeOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositOwn(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTimeOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalanceTokenOur(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceTokenTheir(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityTokenOur(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityTokenTheir(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPresaleTokenTheirMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDevAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPriceLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPricePresale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenTheir(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimableNotDeducted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
