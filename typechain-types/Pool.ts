/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PoolInterface extends utils.Interface {
  contractName: "Pool";
  functions: {
    "createPool(address,address,uint256,uint16)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "devFeeAddress()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingTokens(uint256,address)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDevFeeAddress(address)": FunctionFragment;
    "start()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllPools()": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "users(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "eventDeposit(address,uint256,uint256)": EventFragment;
    "eventEmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "eventSetDevFeeAddress(address,address)": EventFragment;
    "eventWithdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventEmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventSetDevFeeAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventWithdraw"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type eventDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; poolID: BigNumber; amount: BigNumber }
>;

export type eventDepositEventFilter = TypedEventFilter<eventDepositEvent>;

export type eventEmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; poolID: BigNumber; amount: BigNumber }
>;

export type eventEmergencyWithdrawEventFilter =
  TypedEventFilter<eventEmergencyWithdrawEvent>;

export type eventSetDevFeeAddressEvent = TypedEvent<
  [string, string],
  { user: string; devFeeAddress: string }
>;

export type eventSetDevFeeAddressEventFilter =
  TypedEventFilter<eventSetDevFeeAddressEvent>;

export type eventWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; poolID: BigNumber; amount: BigNumber }
>;

export type eventWithdrawEventFilter = TypedEventFilter<eventWithdrawEvent>;

export interface Pool extends BaseContract {
  contractName: "Pool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPool(
      _tokenDepositAddress: string,
      _tokenEarnAddress: string,
      _tokensEarnPerBlock: BigNumberish,
      _feeDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _poolID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      _poolID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _poolID: BigNumberish,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenDeposit: string;
        tokenEarn: string;
        tokensEarnPerBlock: BigNumber;
        lastRewardBlock: BigNumber;
        accTokenPerShare: BigNumber;
        feeDeposit: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevFeeAddress(
      _devFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAllPools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _poolID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _poolID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createPool(
    _tokenDepositAddress: string,
    _tokenEarnAddress: string,
    _tokensEarnPerBlock: BigNumberish,
    _feeDeposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _poolID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devFeeAddress(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _poolID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingTokens(
    _poolID: BigNumberish,
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      tokenDeposit: string;
      tokenEarn: string;
      tokensEarnPerBlock: BigNumber;
      lastRewardBlock: BigNumber;
      accTokenPerShare: BigNumber;
      feeDeposit: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevFeeAddress(
    _devFeeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAllPools(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _poolID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    _poolID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPool(
      _tokenDepositAddress: string,
      _tokenEarnAddress: string,
      _tokensEarnPerBlock: BigNumberish,
      _feeDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _poolID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    devFeeAddress(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      _poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
      _poolID: BigNumberish,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenDeposit: string;
        tokenEarn: string;
        tokensEarnPerBlock: BigNumber;
        lastRewardBlock: BigNumber;
        accTokenPerShare: BigNumber;
        feeDeposit: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDevFeeAddress(
      _devFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    start(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllPools(overrides?: CallOverrides): Promise<void>;

    updatePool(_poolID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _poolID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "eventDeposit(address,uint256,uint256)"(
      user?: string | null,
      poolID?: BigNumberish | null,
      amount?: null
    ): eventDepositEventFilter;
    eventDeposit(
      user?: string | null,
      poolID?: BigNumberish | null,
      amount?: null
    ): eventDepositEventFilter;

    "eventEmergencyWithdraw(address,uint256,uint256)"(
      user?: string | null,
      poolID?: BigNumberish | null,
      amount?: null
    ): eventEmergencyWithdrawEventFilter;
    eventEmergencyWithdraw(
      user?: string | null,
      poolID?: BigNumberish | null,
      amount?: null
    ): eventEmergencyWithdrawEventFilter;

    "eventSetDevFeeAddress(address,address)"(
      user?: string | null,
      devFeeAddress?: string | null
    ): eventSetDevFeeAddressEventFilter;
    eventSetDevFeeAddress(
      user?: string | null,
      devFeeAddress?: string | null
    ): eventSetDevFeeAddressEventFilter;

    "eventWithdraw(address,uint256,uint256)"(
      user?: string | null,
      poolID?: BigNumberish | null,
      amount?: null
    ): eventWithdrawEventFilter;
    eventWithdraw(
      user?: string | null,
      poolID?: BigNumberish | null,
      amount?: null
    ): eventWithdrawEventFilter;
  };

  estimateGas: {
    createPool(
      _tokenDepositAddress: string,
      _tokenEarnAddress: string,
      _tokensEarnPerBlock: BigNumberish,
      _feeDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _poolID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _poolID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      _poolID: BigNumberish,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevFeeAddress(
      _devFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAllPools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _poolID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _poolID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPool(
      _tokenDepositAddress: string,
      _tokenEarnAddress: string,
      _tokensEarnPerBlock: BigNumberish,
      _feeDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _poolID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _poolID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _poolID: BigNumberish,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevFeeAddress(
      _devFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAllPools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _poolID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _poolID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
