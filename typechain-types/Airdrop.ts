/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AirdropInterface extends utils.Interface {
  contractName: "Airdrop";
  functions: {
    "addressReceived(address)": FunctionFragment;
    "amountToClaim()": FunctionFragment;
    "burnRemainingTokens()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimCount()": FunctionFragment;
    "getRemainingTokens()": FunctionFragment;
    "minBaseCoinBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAmountToClaim(uint256)": FunctionFragment;
    "setTokenAddress(address)": FunctionFragment;
    "start(uint256)": FunctionFragment;
    "timeOut()": FunctionFragment;
    "token()": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressReceived",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "amountToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnRemainingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBaseCoinBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountToClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "start", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "timeOut", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnRemainingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBaseCoinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "eventBurnRemainingTokens(uint256)": EventFragment;
    "eventClaimed(address,uint256)": EventFragment;
    "eventSetAmountToClaim(uint256)": EventFragment;
    "eventSetTokenAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventBurnRemainingTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventSetAmountToClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventSetTokenAddress"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type eventBurnRemainingTokensEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type eventBurnRemainingTokensEventFilter =
  TypedEventFilter<eventBurnRemainingTokensEvent>;

export type eventClaimedEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; amount: BigNumber }
>;

export type eventClaimedEventFilter = TypedEventFilter<eventClaimedEvent>;

export type eventSetAmountToClaimEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type eventSetAmountToClaimEventFilter =
  TypedEventFilter<eventSetAmountToClaimEvent>;

export type eventSetTokenAddressEvent = TypedEvent<
  [string],
  { amount: string }
>;

export type eventSetTokenAddressEventFilter =
  TypedEventFilter<eventSetTokenAddressEvent>;

export interface Airdrop extends BaseContract {
  contractName: "Airdrop";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressReceived(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    amountToClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnRemainingTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRemainingTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBaseCoinBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAmountToClaim(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAddress(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      timeSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressReceived(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  amountToClaim(overrides?: CallOverrides): Promise<BigNumber>;

  burnRemainingTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRemainingTokens(overrides?: CallOverrides): Promise<BigNumber>;

  minBaseCoinBalance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAmountToClaim(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAddress(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    timeSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeOut(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressReceived(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    amountToClaim(overrides?: CallOverrides): Promise<BigNumber>;

    burnRemainingTokens(overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    minBaseCoinBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAmountToClaim(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAddress(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    start(timeSeconds: BigNumberish, overrides?: CallOverrides): Promise<void>;

    timeOut(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "eventBurnRemainingTokens(uint256)"(
      amount?: null
    ): eventBurnRemainingTokensEventFilter;
    eventBurnRemainingTokens(
      amount?: null
    ): eventBurnRemainingTokensEventFilter;

    "eventClaimed(address,uint256)"(
      sender?: null,
      amount?: null
    ): eventClaimedEventFilter;
    eventClaimed(sender?: null, amount?: null): eventClaimedEventFilter;

    "eventSetAmountToClaim(uint256)"(
      amount?: null
    ): eventSetAmountToClaimEventFilter;
    eventSetAmountToClaim(amount?: null): eventSetAmountToClaimEventFilter;

    "eventSetTokenAddress(address)"(
      amount?: null
    ): eventSetTokenAddressEventFilter;
    eventSetTokenAddress(amount?: null): eventSetTokenAddressEventFilter;
  };

  estimateGas: {
    addressReceived(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountToClaim(overrides?: CallOverrides): Promise<BigNumber>;

    burnRemainingTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    minBaseCoinBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAmountToClaim(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAddress(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      timeSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeOut(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressReceived(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountToClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnRemainingTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRemainingTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBaseCoinBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAmountToClaim(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAddress(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      timeSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
